
import expr.*;

parser code {:
    Lexer lexer;

    public parser(Lexer lexer) {
        super(lexer);
        this.lexer = lexer;
    }

    /* Change the method report_error so it will display the line
        and column of where the error occurred in the input as well as the reason
        for the error which is passed into the method in the String 'message'. */
    public void report_error(String message, Object info) {
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same type as the
            type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {

            /* Declare a java_cup.runtime.Symbol object 's' with the information in the
                object info that is being typecasted as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message the line number of
                    the error in the input. */
                m.append(" in line "+(s.left+1));

                /* Check if the column number in the input is greater or equal to
                    zero. */
                if (s.right >= 0) {
                /* Add to the end of the StringBuffer error message the column number
                    of the error in the input. */
                    m.append(", column "+(s.right+1));
                }
            }
        }

        /* Add to the end of the StringBuffer error message created in this
            method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains an error
        message out on a line. */
        System.out.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal error it
        will display the line and column number of where the fatal error
        occurred in the input as well as the reason for the fatal error which is
        passed into the method in the object 'message' and then exit.*/

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};

/*  Return to Using CUP  */

/* Use the scanner created with JFlex  */
 scan with {: return lexer.next_token(); :};

/* Terminals */

terminal AND, OR, NOT, TRUE, FALSE, LPAREN, RPAREN;

/* Nonterminals */

non terminal Expr expr;

/* Precedences */

precedence left     OR; /* lowest precedence */
precedence left     AND;
precedence nonassoc NOT; /* highest precedence */

/* Grammar */

expr ::=
    TRUE
        {: RESULT = new Input(1); :}
    | FALSE
        {: RESULT = new Input(0); :}

    | NOT expr:e
        {: RESULT = new Not(e); :}

    | expr:e1 OR expr:e2
        {: RESULT = new Or(e1, e2); :}
    | expr:e1 AND expr:e2
        {: RESULT = new And(e1, e2); :}

    | LPAREN expr:e RPAREN
        {: RESULT = e; :}
    ;
